
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

logging.basicConfig(level=logging.INFO)

TOKEN = "7927069416:AAE3Irs2UoW1cxvLZsVGXuRG8xynN78KKxs"
ADMIN_ID = 902984899  # ‚Üê —Ç–≤–æ–π Telegram ID

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã", "üì∏ –§–æ—Ç–æ"],
        ["üé• –í–∏–¥–µ–æ", "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–Ø ‚Äî –°–≤–µ—Ç–ª–∞–Ω–∞ –ú–∞–º–µ–¥–æ–≤–∞, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏—Å—Å—ë—Ä –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üëá",
        reply_markup=menu_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã":
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì), —è –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å üéØ")
    elif text == "üì∏ –§–æ—Ç–æ":
        await update.message.reply_text("–§–æ—Ç–æ: https://vk.com/album-43062629_265386130")
    elif text == "üé• –í–∏–¥–µ–æ":
        await update.message.reply_text("–í–∏–¥–µ–æ: https://vk.com/wall181769417_4037")
    elif text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        await update.message.reply_text("üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã:")
        context.user_data["step"] = "date"
    elif "step" in context.user_data:
        step = context.user_data["step"]
        if step == "date":
            context.user_data["date"] = text
            await update.message.reply_text("üìç –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:")
            context.user_data["step"] = "location"
        elif step == "location":
            context.user_data["location"] = text
            await update.message.reply_text("üë• –°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?")
            context.user_data["step"] = "guests"
        elif step == "guests":
            context.user_data["guests"] = text
            await update.message.reply_text("üí∏ –ë—é–¥–∂–µ—Ç:")
            context.user_data["step"] = "budget"
        elif step == "budget":
            context.user_data["budget"] = text
            await update.message.reply_text("üí≠ –ü–æ–∂–µ–ª–∞–Ω–∏—è:")
            context.user_data["step"] = "wishes"
        elif step == "wishes":
            context.user_data["wishes"] = text
            await update.message.reply_text("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")
            context.user_data["step"] = "contact"
        elif step == "contact":
            context.user_data["contact"] = text
            data = context.user_data
            msg = (
                f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"–î–∞—Ç–∞: {data['date']}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
                f"–ì–æ—Å—Ç–µ–π: {data['guests']}\n"
                f"–ë—é–¥–∂–µ—Ç: {data['budget']}\n"
                f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['wishes']}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
            await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å!")
            context.user_data.clear()

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
